Text editors: Vim
Aug 27 2022
https://missing.csail.mit.edu/2020/


normal mode -----> insert mode (by press <esc>)
normal mode -----> repalce (R)
normal mode -----> visual (V)
normal mode -----> lmo (shift V)
normal mode -----> block (Crtl V)
normal mode -----> command (:)

Normal: for moving around a file and making edits
Insert: for inserting text
Replace: for replacing text
Visual (plain, line, or block): for selecting blocks of text
Command-line: for running a command


:help X      X info

:q quit (close window)
:w save (“write”)
:wq save and quit
:e {name of file} open file for editing
:ls show open buffers
:help {topic} open help
    :help :w opens help for the :w command
    :help w opens help for the w movement
    
:x Like “:wq”, but write only when changes have been made.



Basic movement: hjkl (left, down, up, right)
Words: w (next word), b (beginning of word), e (end of word)
Lines: 0 (beginning of line), ^ (first non-blank character), $ (end of line)
Screen: shift + [H (top of screen), M (middle of screen), L (bottom of screen)]
Scroll: Ctrl-u (up), Ctrl-d (down)
File: gg (beginning of file), G (end of file)
Line numbers: :{number}<CR> or {number}G (line {number})
Misc: % (corresponding item)
Find:  "/" ; for navigating matches
Search: /{regex}, n / N for navigating matches


i enter Insert mode
    but for manipulating/deleting text, want to use something more than backspace
o / O insert line below / above
d{motion} delete {motion}
    e.g. dw is delete word, d$ is delete to end of line, d0 is delete to beginning of line
c{motion} change {motion}
    e.g. cw is change word
    like d{motion} followed by i
x delete character (equal do dl)
s substitute character (equal to cl)
Visual mode + manipulation
    select text, d to delete it or c to change it
u to undo, <C-r> to redo
y to copy / “yank” (some other commands like d also copy)
p to paste
Lots more to learn: e.g. ~ flips the case of a character

vim的四种退出方式的应用
：q	退出，文件没有改变时应用
：wq	退出，保存文件
： q!	强制退出不保存，在改变文件后不想保存时，使用
：wq!	强制退出保存，在对只读文件编写时使用，
